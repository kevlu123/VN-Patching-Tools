# Key for opcode formats in ws2_op_list.py and wsc_op_list.py
#
# Key    Type                   C# Type
# ----------------------------------------------------
# a      label                  Label
# r      relative label         RelativeLabel
# b      int8                   byte
# h      int16                  ushort
# i      int32                  uint
# f      float                  float
# s      string                 string
# t      name/message string    AffixedString
# H      int16 array            ImmutableArray<ushort>
# S      string array           ImmutableArray<string>
# C      WS2 choice array       ImmutableArray<Ws2Choice>
# D      WSC choice array       ImmutableArray<WscChoice>

import ws2_op_list
import wsc_op_list
from pathlib import Path

this_dir = Path(__file__).resolve().parent

class OpFormat:
    def __init__(self, opcode, description, format):
        self.opcode = opcode
        self.description = description
        self.format = format.replace(" ", "")

def get_op_formats():
    return [
        ("Ws2V1Formats",   [None if op.v1   is None else OpFormat(op.opcode, op.description, op.v1)   for op in ws2_op_list.formats]),
        ("Ws2V2Formats",   [None if op.v2   is None else OpFormat(op.opcode, op.description, op.v2)   for op in ws2_op_list.formats]),
        ("Ws2V3Formats",   [None if op.v3   is None else OpFormat(op.opcode, op.description, op.v3)   for op in ws2_op_list.formats]),
        ("Ws2V3_1Formats", [None if op.v3_1 is None else OpFormat(op.opcode, op.description, op.v3_1) for op in ws2_op_list.formats]),
        ("WscV1Formats",   [None if op.v1   is None else OpFormat(op.opcode, op.description, op.v1)   for op in wsc_op_list.formats]),
    ]

def pascal_to_caps(desc):
    return "".join(
        f"{c}_" if (c.islower() and i < len(desc) - 1 and desc[i + 1].isupper()) else c
        for i, c in enumerate(desc)
    ).upper()

def gen_Opcode_cs():
    with open(this_dir / "../Opcode.auto.cs", "w") as f:
        f.write(
"""// This file is auto-generated by gen_ops.py
// Do not edit this file directly.
namespace Ws2Explorer.Compiler;

/// <summary>
/// List of opcodes and pseudo-opcodes.
/// Negative values are pseudo-opcodes used to signal special meaning to the compiler.
/// These opcodes do not appear in the binary (but their arguments may).
/// </summary>
public static class Opcode
{
#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member

    public const int VERSION = -1;
    public const int LABEL = -2;

""")
        for op in ws2_op_list.formats:
            if op.description is not None:
                f.write(f"    public const byte WS2_{pascal_to_caps(op.description)}_{op.opcode:02X} = 0x{op.opcode:02X};\n")

        f.write("\n")

        for op in wsc_op_list.formats:
            if op.description is not None:
                f.write(f"    public const byte WSC_{pascal_to_caps(op.description)}_{op.opcode:02X} = 0x{op.opcode:02X};\n")

        f.write(
"""
#pragma warning restore CS1591 // Missing XML comment for publicly visible type or member
}
""")

def gen_OpFormat_cs():
    with open(this_dir / "../OpFormat.auto.cs", "w") as f:
        f.write(
"""// This file is auto-generated by gen_ops.py
// Do not edit this file directly.
using System.Collections.Immutable;

namespace Ws2Explorer.Compiler;

internal sealed class OpFormat
{
    public string? Description { get; }
    public string Format { get; }

    private OpFormat(string? description, string format)
    {
        Description = description;
        Format = format;
    }

    public static readonly ImmutableArray<ImmutableArray<OpFormat?>> Formats;

    static OpFormat()
    {
        Formats = [
""")
        
        for name, formats in get_op_formats():
            f.write(f"            {name},\n")
        f.write("        ];\n    }\n\n")

        for name, formats in get_op_formats():
            f.write(f"    private static readonly ImmutableArray<OpFormat?> {name} = [\n")
            for i, op in enumerate(formats):
                if op is None:
                    f.write(f"        /* 0x{i:02X} */ null,\n")
                    continue
                else:
                    desc = f'"{op.description}"' if op.description is not None else "null"
                    fmt = f'"{op.format}"'
                    f.write(f"        /* 0x{i:02X} */ new OpFormat({desc.ljust(30)}, {fmt.ljust(28)}),\n")
            f.write("    ];\n")
        f.write("}\n")

if __name__ == "__main__":
    gen_Opcode_cs()
    gen_OpFormat_cs()
